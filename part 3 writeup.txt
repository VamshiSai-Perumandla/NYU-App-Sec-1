Homework Assignment 1: Part 3 Analysis
Upon executing the testcases from Part 2, namely crash1.gft, crash2.gft, hang.gft, and example.gft, we ascertained the following code coverage:
File: giftcardreader.c
Coverage: 53.22% 

In order to address sections of the code that remained uncovered, we crafted two new .gft files:

1. cov1.gft:

The initial Part 2 testcases covered record types 2 & 3. Thus, code associated with record type 1 wasn't explored. We designed cov1.gft targeting this record type, specifically the segment within the gift_card_json() function:
if (gcrd_ptr->type_of_record == 1) {
   ...
}
This effort enhanced our coverage stats:
Coverage: 71.3% 

2. cov2.gft:

The Part 2 testcases didnâ€™t touch upon switch cases beyond \0x01 and \0x09. To counter this, cov2.gft was fashioned with data bytes "\x10\04\09", bringing to light the \0x10 switch case.
The aftermath of this addition:
Coverage: 73.10%

BUG REPORT

fuzzer1.gft

Reference: The line numbers mentioned are based on the current commit.

Error Description:
The giftcardreader encountered the error:
"*** stack smashing detected ***: terminated
Aborted (core dumped)."

This suggests a probable buffer overflow exploit within the source.
Identified Bug:
Utilizing gdb for debugging, it was found that the overflow was triggered due to an absence of bounds checking within the switch case block at case '0x04' (found on line 43). Here, arg2 exceeded its permissible range with a value of 30 while arg1 held a value of 1. This resulted in overwriting memory addresses that should remain untouched.

Solution:
To rectify this, a bounds check was introduced for arg2 (on line 43) using the condition: "if (arg2 >= 0 && arg2 <= 15)".

fuzzer2.gft

Error Description:
The giftcardreader reported an error:
"Segmentation fault (core dumped)."

This likely stems from an attempt by the program to read a memory segment that's off-limits.
Identified Bug:
A deeper inspection with gdb revealed that the software was trying to access non-existent memory. A full backtrace (using "bt full") highlighted the root cause: the 'message' parameter was referencing an unreachable address. Two specific issues were noted:
'string = 0x8948c8458b48ffff <error: Cannot access memory at address 0x8948c8458b48ffff>'
'grouping = 0xffffffffffffffff <error: Cannot access memory at address 0xffffffffffffffff>'
The executable (fuzzer2.gft) frequently executes the animate function, notably during case '0x03', altering the mptr pointer repeatedly. A missing bounds check on mptr was identified, given that mptr points to msg, which is constrained to 32 bytes as specified.

Solution:
To remedy this, a bounds check for mptr was added (on line 40) using the condition "if (mptr < (msg + 31))", ensuring mptr remains within the defined limits.

After deploying these fuzzer testcases, we achieved:
Coverage: 83.5% 
